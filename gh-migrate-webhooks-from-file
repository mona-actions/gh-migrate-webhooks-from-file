#!/usr/bin/env bash
################################################################################
################################################################################
####### Migrate webhooks with secrets from file ################################
################################################################################
################################################################################
#
# This will migrate webhooks with secrets

set -e

####################################################################################
#### Function addQuotation2String ##################################################
function addQuotation2String() {
  local len_string=${#1}
  local last_character_pos=$((len_string-1))
  local last_character_pos_to_last=$((last_character_pos-1))

  local first_character=${1:0:1}
  local last_character=${1:last_character_pos:1}

  local contents="${1:1:last_character_pos_to_last}"

  if [[ "$1" =~ ( |\') ]]; then
    IFS=' '
    read -a result_array <<< "$contents"

    local SIZE_ARRAY=${#result_array[@]}
 
    local COUNTER_STRING_ARRAY=0

    contents=""
    
    while [[ "$COUNTER_STRING_ARRAY" -lt "$SIZE_ARRAY" ]]; do
       if [ "$COUNTER_STRING_ARRAY" -ne 0 ] && [ "$COUNTER_STRING_ARRAY" -lt "$SIZE_ARRAY" ]; then
        contents="$contents,"
       fi
       contents="$contents\"${result_array[$COUNTER_STRING_ARRAY]}\""
       COUNTER_STRING_ARRAY=$((COUNTER_STRING_ARRAY+1))
    done
  else
    contents="\"$contents\""
  fi

  local result="$first_character$contents$last_character"

  echo "$result"
}


################################################################################
#### Function PrintUsage #######################################################
PrintUsage() {
    cat <<EOM
Usage: gh migrate-webhooks-from-file [options]
Options:
    -h, --help                    : Show script help
    -du, --destination-url        : Set destination GitHub URL (e.g. https://github.example.com) Looks for DEST_URL environment
                                    variable if omitted or defaults to https://github.com                                 
    -dt, --destination-token      : Set Personal Access Token for destination organization with repo scope - Looks for GH_TOKEN_DEST environment
                                    variable if omitted
    -do, --destination-org        : Set destination organization to migrate to - Looks for DEST_ORG environment
                                    variable if omitted
Description:
gh migrate-webhooks-from-file migrates the webhooks to destination organization provided that an input file from mapping file is created
Example:
  gh migrate-webhooks-from-file -do final-destination-org -dt ABCDEFG1234567
EOM
  exit 0
}

while [ $# -gt 0 ]; do
  case "$1" in
  --verbose)
    verbose=1
    ;;
  -du|--destination-url)
    DEST_URL=$2
    shift;
    ;;
  -dt|--destination-token)
   GH_TOKEN_DEST=$2
   shift
   ;;
  -so|--source-org)
   SOURCE_ORG=$2
   shift
   ;;
  -do|--destination-org)
   DEST_ORG=$2
   shift
   ;;
  -h|--help)
    PrintUsage
    ;;
  esac
  shift
done

#####################################################################
#### Function GraphicArt ################################################
GraphicArt() {
  echo ""
  echo "##############################################################"
  echo "         GitHub Migrate Webhooks with secrets from file       "
  cat << "EOF"
.------------------------------------------------------------------------------.
|                             .mmMMMMMMMMMMMMMmm.                              |
|                         .mMMMMMMMMMMMMMMMMMMMMMMMm.                          |
|                      .mMMMMMMMMMMMMMMMMMMMMMMMMMMMMMm.                       |
|                    .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM.                     |
|                  .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM.                   |
|                 MMMMMMMM'  `"MMMMM"""""""MMMM""`  'MMMMMMMM                  |
|                MMMMMMMMM                           MMMMMMMMM                 |
|               MMMMMMMMMM:                         :MMMMMMMMMM                |
|              .MMMMMMMMMM                           MMMMMMMMMM.               |
|              MMMMMMMMM"                             "MMMMMMMMM               |
|              MMMMMMMMM                               MMMMMMMMM               |
|              MMMMMMMMM                               MMMMMMMMM               |
|              MMMMMMMMMM                             MMMMMMMMMM               |
|              `MMMMMMMMMM                           MMMMMMMMMM`               |
|               MMMMMMMMMMMM.                     .MMMMMMMMMMMM                |
|                MMMMMM  MMMMMMMMMM         MMMMMMMMMMMMMMMMMM                 |
|                 MMMMMM  'MMMMMMM           MMMMMMMMMMMMMMMM                  |
|                  `MMMMMM  "MMMMM           MMMMMMMMMMMMMM`                   |
|                    `MMMMMm                 MMMMMMMMMMMM`                     |
|                      `"MMMMMMMMM           MMMMMMMMM"`                       |
|                         `"MMMMMM           MMMMMM"`                          |
|                             `""M           M""`                              |
'------------------------------------------------------------------------------'
EOF
}

################################################################################
#### Function GenerateLogFile ####################################################
GenerateLogFile() {
  echo ""
  echo "######################################################################################"
  echo "This will generate a log name that is going to be used to record logging"
  echo "######################################################################################"

  ##########################
  # Get current date stamp #
  ##########################
  # Get datestring YYYYMMDDHHMM
  DATE=$(date +%Y%m%d%H%M)

  ####################
  # Create File Name #
  ####################
  # Example: MyOrg-all_repos-201901041059.csv
  LOG_FILE_NAME="log-migrate-webhooks-$DATE.log"

  echo ""
  echo "Your log output file name: $LOG_FILE_NAME"

  #############################
  # Create Header in the file #
  #############################
  echo ""
  echo "Creating log file header..."

  # File format headers: 
  echo "======================================================================" >> "${LOG_FILE_NAME}" 2>&1
  echo "========== Logging for migrating webhooks from file - $DATE ====" >> "${LOG_FILE_NAME}" 2>&1
  echo "======================================================================" >> "${LOG_FILE_NAME}" 2>&1
  echo "" >> "${LOG_FILE_NAME}" 2>&1

  #######################
  # Load the error code #
  #######################
  ERROR_CODE=$?

  ##############################
  # Check the shell for errors #
  ##############################
  if [ ${ERROR_CODE} -ne 0 ]; then
    echo "ERROR! Failed to write headers to file:[${LOG_FILE_NAME}]!"
    exit 1
  fi

  echo ""
  echo "Done with creating a new log file named \"$LOG_FILE_NAME\""

}

###############################################################################
### Funtion GetGHEURLDestination ##############################################
GetGHEURLDestination() {
  echo ""
  echo "##############################################################################"
  echo "Need to check whether destination GitHub organization is in GitHub.com or GHES"
  echo "##############################################################################"

    #####################################
   # Check if we have a destination url set #
   #####################################
   if [[ -z ${DEST_URL} ]]; then
     ########################################
     # Get the GitHub Personal Access Token #
     #######################################
     echo ""
     echo "------------------------------------"
     echo "Is your destination organization in GHES?"
     echo "Type [y] for yes and [n] for no."
     echo "Followed with the [Enter] key."
     ########################
     # Read input from user #
     #######################
     read -r CONFIRM_URL_DEST

     if [[ "${CONFIRM_URL_DEST}" == 'y' ]]; then
       CONFIRM_CORRECT_GHES_DEST="n"

       while [ "${CONFIRM_CORRECT_GHES_DEST}" != "y" ]; do
         echo "Please type in your GHES URL (e.g. https://ghes-url.com)"
         echo "Followed with the [Enter] key."
         read -r DEST_URL

         echo "GHES URL:[${DEST_URL}]"
         echo "Is your GHES URL to migrate to correct?"
         echo "Type [y] for yes and [n] for no."
         echo "Followed with the [Enter] key."

         read -r CONFIRM_CORRECT_GHES_DEST
        done
     else
      echo "Alright. We will use GHEC API for your destination instance"
      DEST_URL=https://github.com
     fi
   fi

    ############################################
    # Clean any whitespace that may be entered #
    ############################################
    DEST_URL_NO_WHITESPACE="$(echo -e "${DEST_URL}" | tr -d '[:space:]')"
    DEST_URL=$DEST_URL_NO_WHITESPACE

    if [[ "${DEST_URL}" == "https://github.com" ]]; then
      DEST_API_URL="https://api.github.com"
    else
      DEST_API_URL="${DEST_URL}/api/v3"
    fi

    echo ""
    echo "DEST  URL: $DEST_URL"
    echo "DEST API URL: $DEST_API_URL"

    # If logging is on:
    if [ "$DEBUG" -eq 1 ]; then
      DATE=$(date +%Y%m%d%H%M)

      echo "[$DATE] - ===== Destination URL and API end point ============"  >> "${LOG_FILE_NAME}" 2>&1
      echo "[$DATE] - DEST  URL: $DEST_URL" >> "${LOG_FILE_NAME}" 2>&1
      echo "[$DATE] - DEST API URL: $DEST_API_URL" >> "${LOG_FILE_NAME}" 2>&1
    fi

}


####################################################################
### Funtion GetPersonalAccessTokenDestination ################################
GetPersonalAccessTokenDestination() {
  ############################
   # Check if we have a destination token #
   ############################
   if [[ -z ${GH_TOKEN_DEST} ]]; then
     ########################################
     # Get the GitHub Personal Access Token #
     #######################################
     echo ""
     echo "------------------------------------"
     echo "Please create a GitHub Personal Access token used to gather"
     echo "information from your destination organization, with a scope of all 'repo' and 'admin:org' permission"
     echo "followed by [ENTER]:"
     echo "(note: your input will NOT be displayed)"
     ########################
     # Read input from user #
     #######################
     read -rs GH_TOKEN_DEST
   fi

     ##########################################
     # Check the length of the PAT for sanity #
     ##########################################
     if [ ${#GH_TOKEN_DEST} -ne 40 ]; then
       echo ""
       echo "===== PAT Token verification ============" 
       echo "GitHub PAT are 40 characters in length! Your destination PAT has ${#GH_TOKEN_DEST} characters!"

       # If logging is on:
      if [ "$DEBUG" -eq 1 ]; then
        DATE=$(date +%Y%m%d%H%M)

        echo "" >> "$LOG_FILE_NAME" 2>&1
        echo "[$DATE] - ===== PAT Token verification ============"  >> "$LOG_FILE_NAME" 2>&1
        echo "[$DATE] - GitHub PAT are 40 characters in length! Your destination PAT has ${#GH_TOKEN_DEST} characters!" >> "$LOG_FILE_NAME" 2>&1
      fi

       exit 1
     else
        echo ""
        echo "===== Your PAT token verification ============"
        echo "Great. Your PAT token looks good"
        # If logging is on:
        if [ "$DEBUG" -eq 1 ]; then
          DATE=$(date +%Y%m%d%H%M)

          echo "" >> "$LOG_FILE_NAME" 2>&1
          echo "[$DATE] - ===== Your PAT token verification ============"  >> "$LOG_FILE_NAME" 2>&1
          echo "[$DATE] - Great. Your PAT token looks good" >> "$LOG_FILE_NAME" 2>&1
        fi
     fi
}

####################################################################
### Funtion GetOrganizations ################################
GetOrganizations() {

  ###########################
  # Check destination org or input file #
  ###########################
  if [[ -z ${DEST_ORG} ]]; then
    ###########################################
    # Get the name of the GitHub destination Organization #
    ###########################################
    echo ""
    echo "------------------------------------------------------"
    echo "Please enter name of the destination GitHub Organization you want to migrate to"
    echo "gather information from, followed by [ENTER]:"
    ########################
    # Read input from user #
    ########################
    read -r DEST_ORG

    # Clean any whitespace that may be enetered
    DEST_ORG_NAME_NO_WHITESPACE="$(echo -e "${DEST_ORG}" | tr -d '[:space:]')"
    DEST_ORG="${DEST_ORG_NAME_NO_WHITESPACE}"


    #########################
    # Validate the Org Name #
    #########################
    if [ ${#DEST_ORG} -le 1 ]; then
      echo "Error! You must give a valid destination Organization name!"

       if [ "$DEBUG" -eq 1 ]; then
          DATE=$(date +%Y%m%d%H%M)
          
          echo "" >> "$LOG_FILE_NAME" 2>&1
          echo "[$DATE] - ===== Your Organization ============"  >> "$LOG_FILE_NAME" 2>&1
          echo "[$DATE] - Error! You must give a valid destination Organization name!">> "$LOG_FILE_NAME"
       fi

      exit 1
    else
      echo ""
      echo "===== Your Organization ============"
      echo "Alright. We will proceed with organization name $DEST_ORG"

      # If logging is on:
      if [ "$DEBUG" -eq 1 ]; then
        DATE=$(date +%Y%m%d%H%M)

        echo ""  >> "$LOG_FILE_NAME" 2>&1
        echo "[$DATE] - ===== Your Organization ============" >> "$LOG_FILE_NAME" 2>&1
        echo "[$DATE] - Alright. We will proceed with organization name $DEST_ORG" >> "$LOG_FILE_NAME" 2>&1
      fi
    fi
  fi

}

#####################################################################
##### Function CheckAPILimitDestination ########################################
CheckAPILimitDestination() {
 ##############################################################
  # Check what is remaining in destination PAT, and if 0, we need to sleep it off #
  ##############################################################
  API_RATE_LIMIT_DEST=$(curl -s -X GET \
  --url "${DEST_API_URL}/rate_limit" \
  -H "Authorization: Bearer ${GH_TOKEN_DEST}" | jq -r '.' 2>&1)

  # Check the presence whether of API Rate limiting is disabled (only for GHES):
  API_REMAINING_MESSAGE_DEST=$(echo "${API_RATE_LIMIT_DEST}" \
  | jq -r '.message' 2>&1)

  if [[ "${API_REMAINING_MESSAGE_DEST}" != "Rate limiting is not enabled." ]]; then
    API_REMAINING_DEST=$(echo "${API_RATE_LIMIT_DEST}" \
    | jq -r '.resources.core.remaining' 2>&1)

    API_TOTAL_DEST=$(echo "${API_RATE_LIMIT_DEST}" \
    | jq -r '.resources.core.limit' 2>&1)
    
    API_USED_DEST=$(echo "${API_RATE_LIMIT_DEST}" \
    | jq -r '.resources.core.used' 2>&1)

    echo ""
    echo "=========================== Destination API RATE Limits ======================================"
    echo "Your total API  Rate limit for destination PAT is: ${API_TOTAL_DEST}"
    echo "Your used API  Rate limit for destination PAT is: ${API_USED_DEST}"
    echo "Your remaining API  Rate limit for destination PAT is: ${API_REMAINING_DEST}"

    echo ""
    echo "Now, we will check whether your destination rate limit is about to run out and needs to refresh."
    echo "Currently, we will go to sleep for $SLEEP seconds if your one of your remaining rate limits (core) is less than $MIN_RATELIMIT_GO2SLEEP"
    echo "You can change the minimum required check by changing [MIN_RATELIMIT_GO2SLEEP] value"
    echo ""


    if [ "$DEBUG" -eq 1 ]; then
      DATE=$(date +%Y%m%d%H%M)
      
      echo "" >> "$LOG_FILE_NAME" 2>&1
      echo "=========================== Destination API RATE Limits ======================================"  >> "$LOG_FILE_NAME" 2>&1
      echo "[$DATE] - Your total API  Rate limit for destination PAT is: ${API_TOTAL_DEST}">> "$LOG_FILE_NAME"
      echo "[$DATE] - Your used API  Rate limit for destination PAT is: ${API_USED_DEST}">> "$LOG_FILE_NAME"
      echo "[$DATE] - Your remaining API  Rate limit for destination PAT is: ${API_REMAINING_DEST}">> "$LOG_FILE_NAME"
    fi
    
    if [ "$API_REMAINING_DEST" -lt "$MIN_RATELIMIT_GO2SLEEP" ]; then
      Go2Sleep
    fi
  else
    API_REMAINING_DEST=9999999999
  fi

  #########################
  # Load the error code   #
  #########################
  ERROR_CODE=$?

  ##############################
  # Check the shell for errors #
  ##############################
  if [ "${ERROR_CODE}" -ne 0 ]; then
    echo "ERROR! Failed to get valid response back from GitHub API!"
    echo "ERROR:[${API_REMAINING_DEST}]"

    if [ "$DEBUG" -eq 1 ]; then
      DATE=$(date +%Y%m%d%H%M)
      
      echo "" >> "$LOG_FILE_NAME" 2>&1
      echo "[$DATE] -=========================== Destination API RATE Limits ======================================"  >> "$LOG_FILE_NAME" 2>&1
      echo "[$DATE] - ERROR! Failed to get valid response back from GitHub API!">> "$LOG_FILE_NAME"
    fi
    exit 1
  fi
}

################################################################
##### Function Go2Sleep ########################################
Go2Sleep() {
  echo "WARN! We have run out of API calls and need to sleep!"
  echo "Sleeping for ${SLEEP} seconds before next check"

  COUNTER_SLEEP=0
  sp="/-\|"

  while [ "$COUNTER_SLEEP" -lt "$SLEEP" ]; do
    printf "\b${sp:i++%${#sp}:1}"
    sleep 1
    COUNTER_SLEEP=$((COUNTER_SLEEP+1))
  done

  echo "Awesome. We are done waiting for ${SLEEP} seconds."
}

#####################################################################
##### Function ProceedMigration ########################################
ProceedMigration() {
  echo ""
  echo "######################################################################################"
  echo "This will proceed with migration by getting an input file"
  echo "######################################################################################"

  INPUT_FILE_NAME=

  CONFIRM_INPUT_FILE="n"

    while [ "${CONFIRM_INPUT_FILE}" != "y" ]; do
        echo ""
        echo "Please type in the input file name that you want to use (e.g. sss.csv)"
        echo "Followed with the [Enter] key."
        read -r INPUT_FILE_NAME

        echo "Input File Name:[${INPUT_FILE_NAME}]"
        echo "Is your input file name that contains the migration correct?"
        echo "Type [y] for yes and [n] for no."
        echo "Followed with the [Enter] key."

        read -r CONFIRM_INPUT_FILE
    done

  echo "Alright. We will proceed with migration"

  if [ "$DEBUG" -eq 1 ]; then
      DATE=$(date +%Y%m%d%H%M)
    
      echo "" >> "$LOG_FILE_NAME" 2>&1
      echo "[$DATE] -=========================== Proceeding with migration ======================================"  >> "$LOG_FILE_NAME" 2>&1
      echo "[$DATE] - We will proceed migration with file [$INPUT_FILE_NAME]">> "$LOG_FILE_NAME"
  fi

  IFS=','
  COUNTER=0

  while read -r line;
    do

    echo ""
    echo "Checking destination API limit before an API call"
    CheckAPILimitDestination

    if [ "$COUNTER" -gt 0 ]; then
      read -a result_array <<< "$line"

      REPO_MIGRATION="${result_array[0]}"
      WEBHOOK_URL_MIGRATION="${result_array[1]}"
      WEBHOOK_SECRET_MIGRATION="${result_array[2]}"
      IS_ACTIVE_WEBHOOK_MIGRATION="${result_array[3]}"
      IS_INSECURE_SSL_WEBHOOK_MIGRATION="${result_array[4]}"
      CONTENT_TYPE_WEBHOOK_MIGRATION="${result_array[5]}"
      LIST_EVENTS_WEBHOOK_MIGRATION="${result_array[6]}"
      STRINGS_WEBHOOK_MIGRATION=$(addQuotation2String "$LIST_EVENTS_WEBHOOK_MIGRATION")

      echo ""
      echo "[$DATE] Migrating for $COUNTER item"
      echo "[$DATE] --- Repo name to migrate to: $REPO_MIGRATION"
      echo "[$DATE] --- Webhook URL to migrate to: $WEBHOOK_URL_MIGRATION"
      echo "[$DATE] --- Webhook secret to migrate to: $WEBHOOK_SECRET_MIGRATION"
      echo "[$DATE] --- Is Webhook Active?: $IS_ACTIVE_WEBHOOK_MIGRATION"
      echo "[$DATE] --- Is insecure SSL?: $IS_INSECURE_SSL_WEBHOOK_MIGRATION"
      echo "[$DATE] --- Webhook Payload Content Type: $CONTENT_TYPE_WEBHOOK_MIGRATION"
      echo "[$DATE] --- Webhook Events trigger type: $STRINGS_WEBHOOK_MIGRATION"

      if [ "$DEBUG" -eq 1 ]; then
          DATE=$(date +%Y%m%d%H%M)
        
          echo "" >> "$LOG_FILE_NAME" 2>&1
          echo "[$DATE] Migrating for $COUNTER item"  >> "$LOG_FILE_NAME" 2>&1
          echo "[$DATE] --- Repo name to migrate to: $REPO_MIGRATION" >> "$LOG_FILE_NAME"
          echo "[$DATE] --- Webhook URL to migrate to: $WEBHOOK_URL_MIGRATION" >> "$LOG_FILE_NAME"
          echo "[$DATE] --- Webhook secret to migrate to: $WEBHOOK_SECRET_MIGRATION" >> "$LOG_FILE_NAME"
          echo "[$DATE] --- Is Webhook Active?: $IS_ACTIVE_WEBHOOK_MIGRATION" >> "$LOG_FILE_NAME"
          echo "[$DATE] --- Is insecure SSL?: $IS_INSECURE_SSL_WEBHOOK_MIGRATION" >> "$LOG_FILE_NAME"
          echo "[$DATE] --- Webhook Payload Content Type: $CONTENT_TYPE_WEBHOOK_MIGRATION" >> "$LOG_FILE_NAME"
          echo "[$DATE] --- Webhook Events trigger type: $STRINGS_WEBHOOK_MIGRATION" >> "$LOG_FILE_NAME"
      fi
    
      curl -X POST \
      -H "Accept: application/vnd.github.v3+json" \
      -H "Authorization: token $GH_TOKEN_DEST" \
      "$DEST_API_URL"/repos/"$DEST_ORG"/"$REPO_MIGRATION"/hooks \
      -d '{"name":"web","active":'"$IS_ACTIVE_WEBHOOK_MIGRATION"',"events":'"$STRINGS_WEBHOOK_MIGRATION"',"config":{"secret":"'"$WEBHOOK_SECRET_MIGRATION"'","url":"'"$WEBHOOK_URL_MIGRATION"'","content_type":"'"$CONTENT_TYPE_WEBHOOK_MIGRATION"'","insecure_ssl":"'"$IS_INSECURE_SSL_WEBHOOK_MIGRATION"'"}}'

      echo ""
      echo "Checking destination API limit after an API call"
      CheckAPILimitDestination
    fi;
    COUNTER=$((COUNTER + 1))

   done < "${INPUT_FILE_NAME}"

    if [ "$DEBUG" -eq 1 ]; then
      DATE=$(date +%Y%m%d%H%M)
  
      echo "" >> "$LOG_FILE_NAME" 2>&1
      echo "[$DATE] Finished with migration"  >> "$LOG_FILE_NAME" 2>&1
    fi
}


#####################################################################
#### Function Header ################################################
Header() {

  GraphicArt

  GenerateLogFile

  GetGHEURLDestination
  GetPersonalAccessTokenDestination
  GetOrganizations

  # Print the rate limit at the beginning of script execution:
  echo ""
  echo "######################################################"
  echo "Your rate limit before the script execution"
  echo "######################################################"


  if [ "$DEBUG" -eq 1 ]; then
    DATE=$(date +%Y%m%d%H%M)

    echo "" >> "$LOG_FILE_NAME" 2>&1
    echo "######################################################"  >> "$LOG_FILE_NAME" 2>&1
    echo "Your rate limit before the script execution"  >> "$LOG_FILE_NAME" 2>&1
    echo "######################################################"  >> "$LOG_FILE_NAME" 2>&1
  fi
  CheckAPILimitDestination

}


#####################################################################
#### Function Footer ################################################
Footer() {
  # Print the rate limit at the end of script execution:
  echo ""
  echo "######################################################"
  echo "Your rate limit at the end of script execution"
  echo "######################################################"

  if [ "$DEBUG" -eq 1 ]; then
    DATE=$(date +%Y%m%d%H%M)

    echo "" >> "$LOG_FILE_NAME" 2>&1
    echo "######################################################"  >> "$LOG_FILE_NAME" 2>&1
    echo "Your rate limit at the end of the script execution"  >> "$LOG_FILE_NAME" 2>&1
    echo "######################################################"  >> "$LOG_FILE_NAME" 2>&1
  fi

  CheckAPILimitDestination

  echo ""
  echo "Done with migrating Webhooks from file [$INPUT_FILE_NAME] to [$DEST_ORG]"
  echo "Please check your log file [$LOG_FILE_NAME]"

  if [ "$DEBUG" -eq 1 ]; then
    DATE=$(date +%Y%m%d%H%M)

    echo "" >> "$LOG_FILE_NAME" 2>&1
    echo "Done with migrating Webhooks from file [$INPUT_FILE_NAME] to [$DEST_ORG]"  >> "$LOG_FILE_NAME" 2>&1
    echo "Please check your log file [$LOG_FILE_NAME]"  >> "$LOG_FILE_NAME" 2>&1
  fi
}

###########
# Defaults #
############

DEST_URL=${DEST_URL:-}
DEST_API_URL=${DEST_API_URL:-}

GH_TOKEN_DEST=${GH_TOKEN_DEST:-}

DEST_ORG=${DEST_ORG:-}

MIN_RATELIMIT_GO2SLEEP=10
SLEEP='3600'

# SET DEBUG FLAG. BY DEFAULT, it is on:
DEBUG=1

##########
# HEADER #
##########
Header

#####################################################################
######################## MAIN #######################################

ProceedMigration

##########
# Footer #
##########
Footer
